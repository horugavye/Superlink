"""
Django settings for superlink project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Create log directories if they don't exist
log_dirs = ['logs', 'logs/error', 'logs/access', 'logs/debug']
for log_dir in log_dirs:
    Path(log_dir).mkdir(parents=True, exist_ok=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2ht__ov-d)q^19bi&gzsn8-=h$w7&z1&s$@8o#wgt)a-c=c)bh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'channels',
    'api',
    'users',
    'connections',
    'connections_api',
    'assistant',
    'community',
    'community_api',
    'notifications',
    'chat',
    'chat_api',
    'stories',
    'cloudinary',
    'cloudinary_storage',
]
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'users.middleware.UserActivityMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'superlink.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'superlink.wsgi.application'
ASGI_APPLICATION = 'superlink.asgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

import dj_database_url

DATABASES = {
    'default': dj_database_url.parse(
        'postgresql://horugavye:3FA9mB661lAbeoCPMGP0051wvx37A11j@dpg-d1gga8bipnbc73amcrlg-a/superlinkdata_rggv',
        conn_max_age=600
    )
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Add this line to tell Django to use your custom User model
AUTH_USER_MODEL = 'users.User'

# Add these settings for handling media files (for avatar uploads)
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': 'dpyhgeom3',
    'API_KEY': '716918598439173',
    'API_SECRET': 'YI-C4OVwxhvver_0LkFk9ivQ2No'
}

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# CORS settings
CORS_ALLOWED_ORIGINS = [ "https://superlinkapp.vercel.app",
]

# Allow all Vercel preview deployments
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"https://.*\.vercel\.app$",  # Allows all Vercel preview deployments
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Add CORS middleware at the top of the middleware list
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'users.middleware.UserActivityMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Add CORS_EXPOSE_HEADERS to expose Authorization header
CORS_EXPOSE_HEADERS = ['Authorization']

# Add CORS_PREFLIGHT_MAX_AGE to cache preflight requests
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours

# Add CORS additional settings
CORS_ORIGIN_ALLOW_ALL = False

# Add CORS exposed headers
CORS_EXPOSE_HEADERS = [
    'Content-Type',
    'X-CSRFToken',
    'Authorization',
    'Access-Control-Allow-Origin',
    'Access-Control-Allow-Headers',
    'Access-Control-Allow-Methods',
]

# Add CORS trusted origins
CSRF_TRUSTED_ORIGINS = [
    'https://superlinkapp.vercel.app',
]

# WebSocket settings
CHANNELS_WS_ALLOWED_HOSTS = ["superlinkapp.vercel.app",]
CHANNELS_WS_PROTOCOLS = ['websocket']
CORS_ALLOW_WEBSOCKETS = True
CORS_ALLOW_WEBSOCKET_ORIGINS = [
    "wss://superlinkapp.vercel.app",
    "wss://*.vercel.app",  # Allow all Vercel subdomains
]

# Add security headers
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = False  # Set to True in production
SESSION_COOKIE_SECURE = False  # Set to True in production
CSRF_COOKIE_SECURE = False  # Set to True in production
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'error_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/error/error.log',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'access_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/access/access.log',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'debug_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/debug/debug.log',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'error_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console', 'access_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console', 'access_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console', 'debug_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console', 'error_file'],
        'level': 'INFO',
    },
}

# Add Channels configuration
ASGI_APPLICATION = 'superlink.asgi.application'

# Channel layers configuration
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('red-d1ggfnili9vc73akg7f0', 6379)],
            'capacity': 1500,
            'expiry': 3600,
            'symmetric_encryption_keys': [SECRET_KEY],
            'prefix': 'superlink:',
        },
    },
}

# Request handling settings
REQUEST_TIMEOUT = 60  # Increase to 60 seconds timeout for HTTP requests
REQUEST_SHUTDOWN_TIMEOUT = 10  # Increase to 10 seconds timeout for shutdown

# Disable Django's default request handling during shutdown
DJANGO_REQUEST_HANDLING = {
    'ENABLE_SHUTDOWN_HANDLING': True,
    'SHUTDOWN_TIMEOUT': 10,
}

# Process Management Settings
PROCESS_MANAGEMENT = {
    'MAX_REQUESTS': 10000,  # Maximum number of requests before worker restart
    'MAX_REQUESTS_JITTER': 1000,  # Add randomness to prevent all workers restarting at once
    'TIMEOUT': 120,  # Worker timeout in seconds
    'GRACEFUL_TIMEOUT': 30,  # Graceful shutdown timeout
    'KEEP_ALIVE': 5,  # Keep-alive timeout
    'WORKER_CLASS': 'uvicorn.workers.UvicornWorker',  # Use Uvicorn workers for better performance
}

# Server Settings
SERVER_SETTINGS = {
    'HOST': '0.0.0.0',
    'PORT': 8000,
    'WORKERS': 4,  # Number of worker processes
    'THREADS': 2,  # Number of threads per worker
    'BACKLOG': 2048,  # Maximum number of pending connections
    'LIMIT_CONCURRENCY': 1000,  # Maximum number of concurrent connections
    'LIMIT_MAX_REQUESTS': 10000,  # Maximum number of requests before worker restart
    'TIMEOUT_KEEP_ALIVE': 5,  # Keep-alive timeout
    'GRACEFUL_SHUTDOWN_TIMEOUT': 30,  # Graceful shutdown timeout
}

# Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://red-d1ggfnili9vc73akg7f0:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SOCKET_CONNECT_TIMEOUT': 5,
            'SOCKET_TIMEOUT': 5,
            'RETRY_ON_TIMEOUT': True,
            'MAX_CONNECTIONS': 1000,
            'CONNECTION_POOL_KWARGS': {'max_connections': 100},
        },
        'KEY_PREFIX': 'superlink',
    }
}


# Session Configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = 86400 * 7  # 7 days
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Security Settings
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_SSL_REDIRECT = False  # Set to True in production
SESSION_COOKIE_SECURE = False  # Set to True in production
CSRF_COOKIE_SECURE = False  # Set to True in production
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Azure AI Configuration
AZURE_AI_ENDPOINT = os.environ.get('AZURE_AI_ENDPOINT', 'https://models.github.ai/inference')
AZURE_AI_API_KEY = os.environ.get('AZURE_AI_API_KEY', '')
AZURE_AI_MODEL = os.environ.get('AZURE_AI_MODEL', 'openai/gpt-4.1')

# Celery configuration
CELERY_BROKER_URL = os.environ.get(
    'CELERY_BROKER_URL', 'redis://red-d1ggfnili9vc73akg7f0:6379/0'
)
CELERY_RESULT_BACKEND = os.environ.get(
    'CELERY_RESULT_BACKEND', 'redis://red-d1ggfnili9vc73akg7f0:6379/0'
)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE


from celery.schedules import crontab
CELERY_BEAT_SCHEDULE = {
    'refresh-suggestions-every-24h': {
        'task': 'connections.tasks.refresh_all_suggestions',
        'schedule': crontab(minute=0, hour=3),  # every day at 3am
    },
}